import requests
from bs4 import BeautifulSoup
import telebot
from telebot import types
import random as R
import threading

token = 'thisismytoken'
bot = telebot.TeleBot(token)


# ======================================================================================================================
@bot.message_handler(commands=['start'])
def start(message):
    key = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    btnStart = types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\nüéπ")
    btnHelp = types.KeyboardButton(text="–ü–æ–º–æ—â—å\nüÜò")
    btnWiki = types.KeyboardButton(text='–í–∏–∫–∏–ø–µ–¥–∏—è\nüìú')
    btnGoroskop = types.KeyboardButton(text='–ì–æ—Ä–æ—Å–∫–æ–ø\n‚ôäÔ∏è')
    btnHdrezka = types.KeyboardButton(text='–ú–µ–¥–∏–æ—Ç–µ–∫–∞\nüé•')
    btnCoin = types.KeyboardButton(text='–ë—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\nüé≤')
    btnMagic = types.KeyboardButton(text='–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä\nüé±')
    btnTube = types.KeyboardButton(text='–ú—É–∑—ã–∫–∞ —Å Youtube\nüé∏')
    btnMoney = types.KeyboardButton(text='–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç\nüíπ')
    btnAnekdot = types.KeyboardButton(text='–ê–Ω–µ–∫–¥–æ—Ç\nüòÜ')
    btnAfisha = types.KeyboardButton(text='–ê—Ñ–∏—à–∞\nüé¨')
    btnPogoda = types.KeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n‚òÇÔ∏è')
    btnSearch = types.KeyboardButton(text='–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤\nüì≤')
    btnLostfilm = types.KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏ –∫–∏–Ω–æ\nüì∞')
    btnHinews = types.KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\nüì∞')
    btnHabr = types.KeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏ Habr\nüì∞')
    btnMem = types.KeyboardButton(text='–ú–µ–º—á–∏–∫–∏\nü§™')
    btnPlaylist = types.KeyboardButton(text='–ü–ª–µ—Å–ª–∏—Å—Ç –∞–≤—Ç–æ—Ä–∞\nüéß')
    btnPlaces = types.KeyboardButton(text="–ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n‚õ∞", request_location=True)
    key.row(btnStart, btnHelp)
    key.row(btnGoroskop, btnHdrezka)
    key.row(btnMoney, btnPogoda)
    key.row(btnAfisha, btnLostfilm)
    key.row(btnHinews, btnHabr)
    key.row(btnWiki, btnSearch)
    key.row(btnCoin, btnMagic)
    key.row(btnTube, btnPlaylist)
    key.row(btnAnekdot, btnMem)
    key.row(btnPlaces)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=key)


@bot.message_handler(commands=['help'])
def help(message):
    help = 'üÜò –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n' \
           '‚óΩÔ∏è/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n' \
           '‚óΩÔ∏è/help - –ø–æ–º–æ—â—å\n' \
           '‚óΩÔ∏è/w - –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –≤–∏–∫–∏–ø–µ–¥–∏–∏\n' \
           '‚óΩÔ∏è/goroskop - –≥–æ—Ä–æ—Å–∫–æ–ø\n' \
           '‚óΩÔ∏è/hdrezka - MEDIA –∫–æ–Ω—Ç–µ–Ω—Ç\n' \
           '‚óΩÔ∏è/coin - –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n' \
           '‚óΩÔ∏è/magic - –¥–ª—è –µ—â—ë –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n' \
           '‚óΩÔ∏è/tube - –ø–æ—Å–ª—É—à–∞–π –º—É–∑—ã–∫—É –Ω–∞ —é—Ç—É–±–µ\n' \
           '‚óΩÔ∏è/money - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n' \
           '‚óΩÔ∏è/anekdot - —Ç—Ä–∞–≤–ª—é –Ω–µ —Ö—É–∂–µ –ü–µ—Ç—Ä–æ—Å—è–Ω–∞\n' \
           '‚óΩÔ∏è/afisha - —Ñ–∏–ª—å–º—ã –≤ –ø—Ä–æ–∫–∞—Ç–µ\n' \
           '‚óΩÔ∏è/pogoda - –ø–æ–≥–æ–¥–∞ –≤ –º–∏–Ω—Å–∫–µ\n' \
           '‚óΩÔ∏è/s - –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤\n' \
           '‚óΩÔ∏è/lostfilm - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–∏–∞–ª–æ–≤\n' \
           '‚óΩÔ∏è/hinews - —Ö—Ä–æ–Ω–∏–∫–∞ –∏–∑ –º–∏—Ä–∞ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n' \
           '‚óΩÔ∏è/habr - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Ö–∞–±—Ä\n' \
           '‚óΩÔ∏è/mem - —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ–º—ã\n' \
           '‚óΩÔ∏è/playlist - –ø–ª–µ–π–ª–∏—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞\n' \
           '\n' \
           'üÜò –¢–∞–∫–∂–µ —è –æ—Ç–≤–µ—á–∞—é –Ω–∞:\n' \
           '–°—Ç–∏–∫–µ—Ä—ã, –ú—É–∑—ã–∫—É, –í–æ–π—Å. –ò–≥—Ä–∞—é –≤ –ú–∞—Ä–∫–æ'
    bot.send_message(message.chat.id, help)


@bot.message_handler(commands=['money'])
def money(message):
    url = "http://www.nbrb.by/API/ExRates/Rates?Periodicity=0"
    txt = requests.get(url).json()
    money = []
    for i in txt:
        money.append("{0:<6} üí∞ {1:3}{2:>40}\n".format(i['Cur_OfficialRate'],
                                                       i['Cur_Abbreviation'],
                                                       i['Cur_Name']))
    bot.send_message(message.chat.id, ''.join(money))


@bot.message_handler(commands=['anekdot'])
def anekdot(message):
    url = 'https://nekdo.ru/random/'
    html = requests.get(url).text
    soup = BeautifulSoup(html, 'lxml')
    anekdot = soup.find('div', class_="text").text
    bot.send_message(message.chat.id, anekdot)


@bot.message_handler(commands=['afisha'])
def afisha(message):
    kino = types.InlineKeyboardMarkup()
    html = requests.get('https://afisha.tut.by/place/belarus-kino/').text
    soup = BeautifulSoup(html, 'lxml')
    movie = soup.find('div', class_="events-block js-cut_wrapper").find_all('ul', class_="b-lists list_afisha col-5")
    for i in movie[0:3]:
        into = i.find_all('li')
        for y in into:
            name = y.find('a', class_="name").text
            genre = y.find('div', class_="txt").find('p').text
            title = f'{name} ({genre})'
            ticket = y.find('div', class_="txt").find('a').get('href')
            post = types.InlineKeyboardButton(text=title, url=ticket)
            kino.add(post)
    bot.send_message(message.chat.id, 'üé¨ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –≤ –∫–∏–Ω–æ üé¨', reply_markup=kino)


@bot.message_handler(commands=['pogoda'])
def pogoda(message):
    url = 'http://www.pogoda.by/'
    html = requests.get(url).text
    soup = BeautifulSoup(html, 'lxml')
    minsk = soup.find('div', class_="middle").find('table').find('tr').text
    now = types.InlineKeyboardMarkup()
    check = types.InlineKeyboardButton(text='üå§ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ üå§', url='http://www.pogoda.by/')
    now.add(check)
    bot.send_message(message.chat.id, f'–í –ú–∏–Ω—Å–∫–µ {minsk}', reply_markup=now)


@bot.message_handler(commands=['lostfilm'])
def lostfilm(message):
    url = 'https://lostfilm.info/news/'
    soup = BeautifulSoup(requests.get(url).text, 'lxml')
    lost = soup.find('div', class_="grid_9").find_all('div', class_="news-container")
    news = types.InlineKeyboardMarkup()
    for i in lost:
        title = i.find('h4').text
        link = 'http://lostfilm.info' + i.find('a', class_="submenu-btn-nodrop relative").get('href')
        post = types.InlineKeyboardButton(text=title, url=link)
        news.add(post)
    bot.send_message(message.chat.id, 'üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫–∏–Ω–æ —Å http://lostfilm.info/news/', reply_markup=news)


@bot.message_handler(commands=['hinews'])
def hinews(message):
    news = types.InlineKeyboardMarkup()
    soup = BeautifulSoup(requests.get('https://hi-news.ru/').text, 'lxml')
    hinews = soup.find('div', class_="roll main-roll").find_all('h2')
    for i in hinews:
        name = i.find('a').text
        href = i.find('a').get('href')
        post = types.InlineKeyboardButton(text=name, url=href)
        news.add(post)
    bot.send_message(message.chat.id, 'üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å hi-news.ru', reply_markup=news)


@bot.message_handler(commands=['habr'])
def habr(message):
    habr = types.InlineKeyboardMarkup()
    html = requests.get("https://habr.com/top/monthly/").text
    soup = BeautifulSoup(html, 'lxml')
    title = soup.find('div', class_="posts_list").find_all('h2', class_="post__title")
    for i in title:
        name = i.find('a').text
        href = i.find('a').get('href')
        post = types.InlineKeyboardButton(text=name, url=href)
        habr.add(post)
    bot.send_message(message.chat.id, 'üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ habr.com', reply_markup=habr)


@bot.message_handler(commands=['playlist'])
def playlist(message):
    playlist = types.InlineKeyboardMarkup()
    metalcore = types.InlineKeyboardButton(text='metalcore',
                                           url='https://open.spotify.com/playlist/7tcGFiuphmZkicSbxl5eBw')
    synth_pop = types.InlineKeyboardButton(text='synthpop',
                                           url='https://open.spotify.com/playlist/1HfuXDwLtwaJ57MxJbZ3kb')
    rockhit = types.InlineKeyboardButton(text="80's rock hits",
                                           url="https://open.spotify.com/playlist/6MFiuivM0TNNByXeVBUvtz")
    lofi = types.InlineKeyboardButton(text='lofi moodies',
                                           url="https://open.spotify.com/playlist/30yzoQXNvlYsxIK6BcXS9l")
    playlist.add(synth_pop,rockhit,lofi,metalcore)
    bot.send_message(message.chat.id, '–ú–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ Spotify', reply_markup=playlist)


@bot.message_handler(commands=['w'])
@bot.edited_message_handler(commands=['w'])
def wikipedia(message):
    if message.text == '/w' and len(message.text) == 2 or message.text == "–í–∏–∫–∏–ø–µ–¥–∏—è\nüìú":
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ—Ä–º–∏–Ω –ø–æ—Å–ª–µ /w (–Ω–∞–ø—Ä–∏–º–µ—Ä: "/w –£–≥–ª–µ—Ä–æ–¥")\n'
                                          '–∏ —è –ø–æ–∏—â—É –¥–ª—è —Ç–µ–±—è –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤–∏–∫–∏–ø–µ–¥–∏–∏')
    elif '/w' in message.text and len(message.text) > 3:
        txt = str(message.text)[2:]
        url = 'https://ru.wikipedia.org/wiki/'
        linked = url + txt
        html = requests.get(linked).text
        wiki = BeautifulSoup(html, 'lxml').find("div", id="mw-content-text").find('p').text
        wuku = types.InlineKeyboardMarkup()
        link = types.InlineKeyboardButton(text='–ù–∞ –≤–∏–∫–∏–ø–µ–¥–∏—é üñ•', url=linked)
        wuku.add(link)
        bot.send_message(message.chat.id, wiki, reply_markup=wuku)


@bot.message_handler(commands=['goroskop'])
def goroskop(message):
    keyboard = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton(text='‚ôàÔ∏è–û–≤–µ–Ω', callback_data='–æ–≤–µ–Ω')
    but_2 = types.InlineKeyboardButton(text='‚ôâÔ∏è–¢–µ–ª–µ—Ü', callback_data='—Ç–µ–ª–µ—Ü')
    but_3 = types.InlineKeyboardButton(text='‚ôäÔ∏è–ë–ª–∏–∑–Ω–µ—Ü', callback_data='–±–ª–∏–∑–Ω–µ—Ü')
    but_4 = types.InlineKeyboardButton(text='‚ôãÔ∏è–†–∞–∫', callback_data='—Ä–∞–∫')
    but_5 = types.InlineKeyboardButton(text='‚ôåÔ∏è–õ–µ–≤', callback_data='–ª–µ–≤')
    but_6 = types.InlineKeyboardButton(text='‚ôçÔ∏è–î–µ–≤–∞', callback_data='–¥–µ–≤–∞')
    but_7 = types.InlineKeyboardButton(text='‚ôéÔ∏è–í–µ—Å—ã', callback_data='–≤–µ—Å—ã')
    but_8 = types.InlineKeyboardButton(text='‚ôèÔ∏è–°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='—Å–∫–æ—Ä–ø–∏–æ–Ω')
    but_9 = types.InlineKeyboardButton(text='‚ôêÔ∏è–°—Ç—Ä–µ–ª–µ—Ü', callback_data='—Å—Ç—Ä–µ–ª–µ—Ü')
    but_10 = types.InlineKeyboardButton(text='‚ôëÔ∏è–ö–æ–∑–µ—Ä–æ–≥', callback_data='–∫–æ–∑–µ—Ä–æ–≥')
    but_11 = types.InlineKeyboardButton(text='‚ôíÔ∏è–í–æ–¥–æ–ª–µ–π', callback_data='–≤–æ–¥–æ–ª–µ–π')
    but_12 = types.InlineKeyboardButton(text='‚ôìÔ∏è–†—ã–±—ã', callback_data='—Ä—ã–±—ã')
    keyboard.add(but_1, but_2, but_3, but_4, but_5, but_6, but_7, but_8, but_9, but_10, but_11, but_12)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∑–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞:', reply_markup=keyboard)


@bot.message_handler(commands=['coin'])
def coinflip(message):
    coin = R.randrange(101)
    bot.send_message(message.chat.id, 'üî∏ –û–†–Å–õ' if coin <= 50 else '‚ô¶Ô∏è–†–ï–®–ö–ê')


@bot.message_handler(commands=['magic'])
@bot.edited_message_handler(commands=['magic'])
def magic(message):
    if message.text == '/magic' and len(message.text) == 6 or message.text == "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä\nüé±":
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Ä—å—ë–∑–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å '
                                          '—Ä–µ—à–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! –ò–º–µ–Ω–Ω–æ –¥–ª—è —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –±—ã–ª –ø—Ä–∏–¥—É–º–∞–Ω '
                                          '–º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ —É –Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                          '"/magic —Å—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?", –∫–∞–∫ –æ–Ω —Å—Ä–∞–∑—É –∂–µ –Ω–∞–ø–∏—à–µ—Ç –æ –í–∞—à–µ–π '
                                          '–¥–∏–ª–µ–º–º–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–∞–¥–∞–ª–∫–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –í–∞–º –ª—É—á—à–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å!')
    else:
        if '?' in message.text:
            magic8 = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞', '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º',
                      '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª', '–î–∞',
                      '–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å',
                      '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å', '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π',
                      '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª', '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ',
                      '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']
            bot.send_message(message.chat.id, R.choice(magic8))
        else:
            bot.send_message(message.chat.id, 'üåÄ –≠—Ç–æ —Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å?')


@bot.message_handler(commands=['tube'])
def youtube(message):
    f = open('my_playlist.txt', 'r')
    l = [line.strip() for line in f]
    bot.send_message(message.chat.id, R.choice(l))


@bot.message_handler(commands=['hdrezka'])
def rezka(message):
    media_select = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton(text='–§–∏–ª—å–º—ã', callback_data='—Ñ–∏–ª—å–º—ã')
    but_2 = types.InlineKeyboardButton(text='–°–µ—Ä–∏–∞–ª—ã', callback_data='—Å–µ—Ä–∏–∞–ª—ã')
    but_3 = types.InlineKeyboardButton(text='–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã', callback_data='–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã')
    but_4 = types.InlineKeyboardButton(text='–ê–Ω–∏–º–µ', callback_data='–∞–Ω–∏–º–µ')
    but_5 = types.InlineKeyboardButton(text='–ù–æ–≤–∏–Ω–∫–∏', callback_data='–Ω–æ–≤–∏–Ω–∫–∏')
    but_6 = types.InlineKeyboardButton(text='–ê–Ω–æ–Ω—Å—ã', callback_data='–∞–Ω–æ–Ω—Å—ã')
    search = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫', callback_data='–ø–æ–∏—Å–∫')
    media_select.add(but_1, but_2, but_3, but_4, but_5, but_6, search)
    bot.send_message(message.chat.id, 'üé• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=media_select)


@bot.message_handler(commands=['s'])
@bot.edited_message_handler(commands=['s'])
def s(message):
    if message.text == '/s' and len(
            message.text) == 2 or message.text == '–ø–æ–∏—Å–∫' or message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤\nüì≤":
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ñ–∏–ª—å–º –ø–æ—Å–ª–µ /s (–Ω–∞–ø—Ä–∏–º–µ—Ä: "/s –∏–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä")\n'
                                          '–∏ —è –≤—ã–¥–∞–º —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.')
    elif '/s' in message.text and len(message.text) >= 5:
        s = types.InlineKeyboardMarkup()
        url = 'https://rezka.ag/index.php?do=search&subaction=search&q='
        user = message.text[2:]
        html = requests.get(url + user).text
        soup = BeautifulSoup(html, 'lxml')
        prt = soup.find('div', class_="b-content__inline b-content__search_wrapper").find_all('div',
                                                                                              class_="b-content__inline_item-link")
        for i in prt[0:10]:
            name = i.find('a').text
            href = i.find('a').get('href')
            genre = i.find('div').text
            txt = f"{name} ({genre})"
            post = types.InlineKeyboardButton(text=txt, url=href)
            s.add(post)
        bot.send_message(message.chat.id, 'üì≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ HDrezka', reply_markup=s)


@bot.message_handler(commands=['mem'])
def mem(message):
    url = 'https://www.anekdot.ru/random/mem/'
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:45.0) Gecko/20100101 Firefox/45.0'}
    html = requests.get(url, headers=headers).text
    soup = BeautifulSoup(html, 'lxml')
    img = soup.find('div', class_="col-left col-left-margin").find_all('div', class_="topicbox")
    for i in img:
        try:
            mem = i.find('img').get('src')
            if mem == None:
                continue
            bot.send_photo(message.chat.id, mem)
            break
        except:
            continue


@bot.message_handler(content_types=['sticker'])
def gif(message):
    bot.send_sticker(message.chat.id, 'CAADAgAD9wMAAonq5QfPnExSSdW_zhYE')


@bot.message_handler(content_types=['audio', 'voice'])
def audio(message):
    bot.send_audio(message.chat.id, 'CQADAgAD6QQAAuD0-EmcefSQ_1T4BxYE')


@bot.message_handler(content_types=['location'])
def handle_loc(message):
    map = types.InlineKeyboardMarkup()
    lon, lat = message.location.longitude, message.location.latitude
    url = "https://www.google.com/maps/search/{}/@{},{},15z/data=!3m1!4b1!4m7!2m6!3m5!1z0KDQtdGB0YLQvtGA0LDQvdGL!2s–í–∞—à–µ%20–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!4m2!1d30.9657495!2d52.4124194"
    magazin = types.InlineKeyboardButton(text='–ú–∞–≥–∞–∑–∏–Ω—ã', url=url.format('–º–∞–≥–∞–∑–∏–Ω', lat, lon))
    apteka = types.InlineKeyboardButton(text='–ê–ø—Ç–µ–∫–∏', url=url.format('–∞–ø—Ç–µ–∫–∞', lat, lon))
    bankomat = types.InlineKeyboardButton(text='–ë–∞–Ω–∫–æ–º–∞—Ç—ã', url=url.format('–±–∞–Ω–∫–æ–º–∞—Ç', lat, lon))
    kafe = types.InlineKeyboardButton(text='–ö–∞—Ñ–µ', url=url.format('–∫–∞—Ñ–µ', lat, lon))
    cinema = types.InlineKeyboardButton(text='–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã', url=url.format('–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä', lat, lon))
    map.add(magazin, apteka, bankomat, kafe, cinema)
    coord = f"–®–∏—Ä–æ—Ç–∞ : {lat} , –î–æ–ª–≥–æ—Ç–∞ : {lon}\n–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è:"
    bot.send_message(message.chat.id, coord, reply_markup=map)


@bot.message_handler(content_types=['text'])
@bot.edited_message_handler(content_types=['text'])
def text(message):
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\nüéπ":
        start(message)
    elif message.text == "–ü–æ–º–æ—â—å\nüÜò":
        help(message)
    elif message.text == "–í–∏–∫–∏–ø–µ–¥–∏—è\nüìú":
        wikipedia(message)
    elif message.text == "–ì–æ—Ä–æ—Å–∫–æ–ø\n‚ôäÔ∏è":
        goroskop(message)
    elif message.text == "–ú–µ–¥–∏–æ—Ç–µ–∫–∞\nüé•":
        rezka(message)
    elif message.text == "–ë—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\nüé≤":
        coinflip(message)
    elif message.text == "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä\nüé±":
        magic(message)
    elif message.text == "–ú—É–∑—ã–∫–∞ —Å Youtube\nüé∏":
        youtube(message)
    elif message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç\nüíπ":
        money(message)
    elif message.text == "–ê–Ω–µ–∫–¥–æ—Ç\nüòÜ":
        anekdot(message)
    elif message.text == "–ê—Ñ–∏—à–∞\nüé¨":
        afisha(message)
    elif message.text == "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n‚òÇÔ∏è":
        pogoda(message)
    elif message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤\nüì≤":
        s(message)
    elif message.text == "–ù–æ–≤–æ—Å—Ç–∏ –∫–∏–Ω–æ\nüì∞":
        lostfilm(message)
    elif message.text == "–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\nüì∞":
        hinews(message)
    elif message.text == "–ù–æ–≤–æ—Å—Ç–∏ Habr\nüì∞":
        habr(message)
    elif message.text == "–ú–µ–º—á–∏–∫–∏\nü§™":
        mem(message)
    elif message.text == "–ü–ª–µ—Å–ª–∏—Å—Ç –∞–≤—Ç–æ—Ä–∞\nüéß":
        playlist(message)
    elif message.text == "–ú–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n‚õ∞":
        handle_loc(message)
    elif message.text.lower() == '–º–∞—Ä–∫–æ':
        polo = types.InlineKeyboardMarkup()
        marko = types.InlineKeyboardButton(text='–ü–û–õ–û', url='https://www.youtube.com/watch?v=KeFyE6-spWM')
        polo.add(marko)
        bot.send_message(message.chat.id, 'üòÅ', reply_markup=polo)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!")


@bot.callback_query_handler(func=lambda c: True)
def inline_selected(c):
    zodiac = {"–æ–≤–µ–Ω": 'aries', "—Ç–µ–ª–µ—Ü": "taurus", "–±–ª–∏–∑–Ω–µ—Ü": "gemini", "—Ä–∞–∫": "cancer", "–ª–µ–≤": "leo",
              "–¥–µ–≤–∞": "virgo", "–≤–µ—Å—ã": "libra", "—Å–∫–æ—Ä–ø–∏–æ–Ω": "scorpio", "—Å—Ç—Ä–µ–ª–µ—Ü": "sagittarius",
              "–∫–æ–∑–µ—Ä–æ–≥": "capricorn", "–≤–æ–¥–æ–ª–µ–π": "aquarius", "—Ä—ã–±—ã": "pisces"}
    url_list = {'—Ñ–∏–ª—å–º—ã': 'https://rezka.ag/films/?filter=watching',
                '—Å–µ—Ä–∏–∞–ª—ã': 'https://rezka.ag/series/?filter=watching',
                '–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã': 'https://rezka.ag/cartoons/?filter=watching',
                '–∞–Ω–∏–º–µ': 'https://rezka.ag/animation/?filter=watching',
                '–Ω–æ–≤–∏–Ω–∫–∏': 'https://rezka.ag/new/?filter=watching',
                '–∞–Ω–æ–Ω—Å—ã': 'https://rezka.ag/announce/'}
    if c.data in zodiac:
        url = "http://1001goroskop.ru/?znak="
        html = requests.get(url + zodiac[c.data]).text
        soup = BeautifulSoup(html, 'lxml')
        goroskop = soup.find('table', id="eje_text").find('div', itemprop="description").find('p').text
        bot.send_message(c.message.chat.id, goroskop)
    if c.data == '–ø–æ–∏—Å–∫':
        link = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ HDrezka',
                                            url='https://rezka.ag/index.php?do=search&subaction=search&q=python')
        link.add(search)
        bot.send_message(c.message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ñ–∏–ª—å–º –ø–æ—Å–ª–µ /s (–Ω–∞–ø—Ä–∏–º–µ—Ä: "/s –∏–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä")\n'
                                            '–∏ —è –≤—ã–¥–∞–º —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.', reply_markup=link)
    if c.data in url_list:
        html = requests.get(url_list[c.data]).text
        soup = BeautifulSoup(html, 'lxml')
        content = soup.find('div', class_="b-content__inline").find_all('div', class_="b-content__inline_item-link")
        medialist = types.InlineKeyboardMarkup()
        for i in content[0:10]:
            name, href = i.text, i.find('a').get('href')
            medialist.add(types.InlineKeyboardButton(text=name, url=href))
        bot.send_message(c.message.chat.id, f'üéû {c.data} —Å–µ–π—á–∞—Å —Å–º–æ—Ç—Ä—è—Ç', reply_markup=medialist)


def every_minute():
    requests.get('https://www.google.com')
    threading.Timer(60, every_minute).start()


# ======================================================================================================================
if __name__ == '__main__':
    every_minute()
    bot.polling(none_stop=True, interval=0)
